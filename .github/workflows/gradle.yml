# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
# Фиксим права ДО использования Java/Gradle
    - name: Fix permissions
      run: |
        git update-index --chmod=+x gradlew
        chmod +x gradlew
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.1.0
#      uses: gradle/actions/setup-gradle@ccf0d5b8c1b155a4d7e508b8d00f1a8e5c6d0d8f # v4.1.0
#      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
#    - name: Make gradlew executable
#      run: chmod +x ./gradlew
    - name: Build with Gradle Wrapper
      run: ./gradlew build

# NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
# If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
#
# - name: Setup Gradle
#   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
#   with:
#     gradle-version: '8.9'
#
# - name: Build with Gradle 8.9
#   run: gradle build

#  dependency-submission:

#    runs-on: ubuntu-latest
#    permissions:
#      contents: write

#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up JDK 21
#      uses: actions/setup-java@v4
#      with:
#        java-version: '21'
#        distribution: 'temurin'

# Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
# See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
#   - name: Generate and submit dependency graph
#     uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

# ==============================================
# 3. Пуш в ОБЩИЙ репозиторий
# ==============================================

    - name: Import GPG key and sign commit (✔️ Verified)
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GIT_COMMITTER_NAME: "Anna"
        GIT_COMMITTER_EMAIL: "12345678+svetlovaanna@users.noreply.github.com"
        TARGET_FOLDER: "core"
        AUTH_REPO_URL: https://${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/svetlovaanna/travel_test.git
      run: |
        set -e

        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)

        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo RELOADAGENT | gpg-connect-agent

        git config --global user.name "Anna"
        git config --global user.email "191621076+svetlovaanna@users.noreply.github.com"
        git config --global commit.gpgsign true
        git config --global user.signingkey "0D978B848B18739D"
        git config --global gpg.program gpg

        git clone --filter=blob:none --sparse $AUTH_REPO_URL target-repo
        cd target-repo

        git sparse-checkout set $TARGET_FOLDER
        git checkout main || git checkout -b main

        rm -rf $TARGET_FOLDER
        cp -r ../$TARGET_FOLDER $TARGET_FOLDER

        git add $TARGET_FOLDER
        COMMIT_MSG="${{ github.event.head_commit.message || 'Signed sync from Anna' }}"

        echo "$COMMIT_MSG" | git commit -F - --gpg-sign="$KEY_ID" || echo "No changes"
        git push origin main
        
        
        # ==============================================
        # 5. Уведомления в Telegram
        # ==============================================
    - name: Telegram Success
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ✅ *Сборка успешна* 
          Репозиторий: ${{ github.repository }}
          Коммит: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          Логи: [Посмотреть](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          parse_mode: markdown
    - name: Telegram Failure
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ❌ *Сборка провалена* 
           Репозиторий: ${{ github.repository }}
           Коммит: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
           Логи: [Посмотреть](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
           parse_mode: markdown
