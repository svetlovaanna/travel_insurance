
Есть отличная идея добавить в проект ачивки за выполненные задания.
Это добавит в проект элемент геймификации.

В этом файле будем собирать названия ачивок для каждого задания.

Идея очень простая: после выполнения задания придумайте ачивку
для него и добавьте ее в этот файл напротив задания. Если такая
ачивка уже есть, то добавьте к ней голос например (+1).

task 1:
**"Проводник в мир Gradle"** – за первое знакомство с Gradle.
**"Настройщик JDK"** – за успешную настройку Java Development Kit.


task 2:
**"Первая сборка"** – за успешное выполнение полной сборки проекта.
**"Сборщик проектов"** – за выполнение сборки всех модулей проекта.
**"Секреты команды build"** – за выполнение задания по изучению команды build в Gradle.

task 3:
**"Путь терминала"** – за выполнение первой сборки проекта через терминал.
**"Консольный мастер"** – за успешную работу с командой `./gradlew build` через консоль.
**"Повелитель терминала"** – за регулярное использование терминала для сборки проекта.

task 4:
**"Страж Maven структуры"** – за изучение и понимание Maven структуры проекта.
**"Наследие Maven"** – за изучение истории возникновения и применения Maven структуры в разработке.

task 5:

**"Артефакт-детектив"** – за исследование всех файлов и папок, созданных при сборке приложения.

task 6:

**"Мастер чистки"** – за успешное использование команды clean для разных частей проекта.


task 7:

**"Пусковой механизм"** – за успешный старт Java-приложения.


task 8:

**"Страж репозитория"** – за изучение и настройку `.gitignore`.


task 9:

**"Исследователь Gradle"** – за глубокое погружение в настройки и конфигурацию проекта с Gradle.


task 10:

**"Мастер конструкторов"** – за создание дефолтного и параметризованного конструктора.


task 11:

**"Мастер get/set методов"** – за успешное написание get/set методов.


task 12:

**"Составитель ответа"** – за правильное заполнение полей ответа на основе данных из запроса.

task 13:

**"Тестовая броня"** – за защиту кода с помощью качественных тестов.
**"Докажи это!"** – за использование автоматических тестов для подтверждения работоспособности кода.
**"Тестовый гарант"** – за успешное написание тестов, которые гарантируют корректность заполнения ответа.
**"Мастер доказательств"** – за доказательство работоспособности кода через хорошо написанные тесты.


task 14:

**"Тестовый перфекционист"** – за улучшение тестового покрытия с правильной структурой.


task 15:

**"AI-тестировщик: Освой генерацию тестов с ChatGPT"**
- *Пояснение*: Используй искусственный интеллект для автоматизации создания тестов и сравни их с ручными.


task 16:

**"Мастер финансовых расчетов: Выбирай BigDecimal"**
   - *Пояснение*: Узнай, почему для денег в Java лучше использовать BigDecimal вместо float или double.


task 17:

**"Мастер подсчета дней: Вычисление agreementPrice"**
   - *Пояснение*: Заполни свойство `agreementPrice`, вычислив количество дней между `agreementDateFrom` и `agreementDateTo`.


task 18:

**"Мастер рефакторинга: Вынеси расчет дней в метод"**
   - *Пояснение*: Улучши читаемость и поддерживаемость кода, выделив расчет количества дней между датами в отдельный метод с понятным названием.

**"Чистый кодер: Создай понятный метод расчета дней"**
   - *Пояснение*: Сделай код более понятным для других разработчиков, дав методу говорящее название, которое сразу объясняет его функциональность.



task 19:

**"Мастер инкапсуляции: Изолируй логику работы с датами"**
   - *Описание*: Улучши структуру приложения, выделив работу с датами в отдельный класс с понятным интерфейсом.


task 20:

**"Детектив состояния: Выяви риски stateful объектов"**
   - *Пояснение*: Пойми, почему stateful объекты могут привести к проблемам в многопоточных программах.
